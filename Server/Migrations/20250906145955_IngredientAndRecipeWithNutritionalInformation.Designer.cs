// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Server;

#nullable disable

namespace Server.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250906145955_IngredientAndRecipeWithNutritionalInformation")]
    partial class IngredientAndRecipeWithNutritionalInformation
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Server.Models.Food.Food", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DescriptionPt")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Icon")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsRecipe")
                        .HasColumnType("boolean");

                    b.Property<string>("Keys")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("KeysPt")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NamePt")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("Sugar")
                        .HasColumnType("double precision");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<int>("UnitOfMeasurement")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Foods");
                });

            modelBuilder.Entity("Server.Models.Food.Measure", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("FoodId")
                        .HasColumnType("integer");

                    b.Property<double>("Quantity")
                        .HasColumnType("double precision");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("FoodId");

                    b.ToTable("Measure");
                });

            modelBuilder.Entity("Server.Models.Ingredient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("FoodId")
                        .HasColumnType("integer");

                    b.Property<double>("Gl")
                        .HasColumnType("double precision");

                    b.Property<int>("MeasureId")
                        .HasColumnType("integer");

                    b.Property<double>("Quantity")
                        .HasColumnType("double precision");

                    b.Property<int?>("RecipeStepId")
                        .HasColumnType("integer");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("FoodId");

                    b.HasIndex("MeasureId");

                    b.HasIndex("RecipeStepId");

                    b.ToTable("Ingredient");
                });

            modelBuilder.Entity("Server.Models.Recipe", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Additional")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("OwnerId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Recipes");
                });

            modelBuilder.Entity("Server.Models.RecipeStep", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Additional")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Preparation")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("RecipeId")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RecipeId");

                    b.ToTable("RecipeStep");
                });

            modelBuilder.Entity("Server.Models.Food.Food", b =>
                {
                    b.OwnsOne("Server.Shared.AminoAcids", "AminoAcids", b1 =>
                        {
                            b1.Property<int>("FoodId")
                                .HasColumnType("integer");

                            b1.Property<double>("Alanine")
                                .HasColumnType("double precision");

                            b1.Property<double>("Arginine")
                                .HasColumnType("double precision");

                            b1.Property<double>("AsparticAcid")
                                .HasColumnType("double precision");

                            b1.Property<double>("Cystine")
                                .HasColumnType("double precision");

                            b1.Property<double>("GlutamicAcid")
                                .HasColumnType("double precision");

                            b1.Property<double>("Glutamine")
                                .HasColumnType("double precision");

                            b1.Property<double>("Glycine")
                                .HasColumnType("double precision");

                            b1.Property<double>("Histidine")
                                .HasColumnType("double precision");

                            b1.Property<double>("Isoleucine")
                                .HasColumnType("double precision");

                            b1.Property<double>("Leucine")
                                .HasColumnType("double precision");

                            b1.Property<double>("Lysine")
                                .HasColumnType("double precision");

                            b1.Property<double>("Methionine")
                                .HasColumnType("double precision");

                            b1.Property<double>("Phenylalanine")
                                .HasColumnType("double precision");

                            b1.Property<double>("Proline")
                                .HasColumnType("double precision");

                            b1.Property<double>("Serine")
                                .HasColumnType("double precision");

                            b1.Property<double>("Threonine")
                                .HasColumnType("double precision");

                            b1.Property<double>("Tryptophan")
                                .HasColumnType("double precision");

                            b1.Property<double>("Tyrosine")
                                .HasColumnType("double precision");

                            b1.Property<double>("Valine")
                                .HasColumnType("double precision");

                            b1.HasKey("FoodId");

                            b1.ToTable("Foods");

                            b1.WithOwner()
                                .HasForeignKey("FoodId");
                        });

                    b.OwnsOne("Server.Shared.Minerals", "Minerals", b1 =>
                        {
                            b1.Property<int>("FoodId")
                                .HasColumnType("integer");

                            b1.Property<double>("Calcium")
                                .HasColumnType("double precision");

                            b1.Property<double>("Copper")
                                .HasColumnType("double precision");

                            b1.Property<double>("Fluoride")
                                .HasColumnType("double precision");

                            b1.Property<double>("Iron")
                                .HasColumnType("double precision");

                            b1.Property<double>("Magnesium")
                                .HasColumnType("double precision");

                            b1.Property<double>("Manganese")
                                .HasColumnType("double precision");

                            b1.Property<double>("Phosphorus")
                                .HasColumnType("double precision");

                            b1.Property<double>("Potassium")
                                .HasColumnType("double precision");

                            b1.Property<double>("Selenium")
                                .HasColumnType("double precision");

                            b1.Property<double>("Sodium")
                                .HasColumnType("double precision");

                            b1.Property<double>("Zinc")
                                .HasColumnType("double precision");

                            b1.HasKey("FoodId");

                            b1.ToTable("Foods");

                            b1.WithOwner()
                                .HasForeignKey("FoodId");
                        });

                    b.OwnsOne("Server.Shared.NutritionalInformation", "NutritionalInformation", b1 =>
                        {
                            b1.Property<int>("FoodId")
                                .HasColumnType("integer");

                            b1.Property<double>("Acidification")
                                .HasColumnType("double precision");

                            b1.Property<double>("Ashes")
                                .HasColumnType("double precision");

                            b1.Property<double>("Calories")
                                .HasColumnType("double precision");

                            b1.Property<double>("Carbohydrates")
                                .HasColumnType("double precision");

                            b1.Property<double>("Cholesterol")
                                .HasColumnType("double precision");

                            b1.Property<double>("DietaryFiber")
                                .HasColumnType("double precision");

                            b1.Property<double>("Gi")
                                .HasColumnType("double precision");

                            b1.Property<double>("Gl")
                                .HasColumnType("double precision");

                            b1.Property<double>("MonounsaturatedFats")
                                .HasColumnType("double precision");

                            b1.Property<double>("PolyunsaturatedFats")
                                .HasColumnType("double precision");

                            b1.Property<double>("Proteins")
                                .HasColumnType("double precision");

                            b1.Property<double>("SaturedFats")
                                .HasColumnType("double precision");

                            b1.Property<double>("TotalFat")
                                .HasColumnType("double precision");

                            b1.HasKey("FoodId");

                            b1.ToTable("Foods");

                            b1.WithOwner()
                                .HasForeignKey("FoodId");
                        });

                    b.OwnsOne("Server.Shared.Vitamins", "Vitamins", b1 =>
                        {
                            b1.Property<int>("FoodId")
                                .HasColumnType("integer");

                            b1.Property<double>("A")
                                .HasColumnType("double precision");

                            b1.Property<double>("AlphaCarotene")
                                .HasColumnType("double precision");

                            b1.Property<double>("B1")
                                .HasColumnType("double precision");

                            b1.Property<double>("B11")
                                .HasColumnType("double precision");

                            b1.Property<double>("B12")
                                .HasColumnType("double precision");

                            b1.Property<double>("B2")
                                .HasColumnType("double precision");

                            b1.Property<double>("B3")
                                .HasColumnType("double precision");

                            b1.Property<double>("B5")
                                .HasColumnType("double precision");

                            b1.Property<double>("B6")
                                .HasColumnType("double precision");

                            b1.Property<double>("B7")
                                .HasColumnType("double precision");

                            b1.Property<double>("B9")
                                .HasColumnType("double precision");

                            b1.Property<double>("BetaCarotene")
                                .HasColumnType("double precision");

                            b1.Property<double>("C")
                                .HasColumnType("double precision");

                            b1.Property<double>("Choline")
                                .HasColumnType("double precision");

                            b1.Property<double>("CryptoxanthinCarotene")
                                .HasColumnType("double precision");

                            b1.Property<double>("D")
                                .HasColumnType("double precision");

                            b1.Property<double>("D2")
                                .HasColumnType("double precision");

                            b1.Property<double>("D3")
                                .HasColumnType("double precision");

                            b1.Property<double>("E")
                                .HasColumnType("double precision");

                            b1.Property<double>("K")
                                .HasColumnType("double precision");

                            b1.Property<double>("Lycopene")
                                .HasColumnType("double precision");

                            b1.HasKey("FoodId");

                            b1.ToTable("Foods");

                            b1.WithOwner()
                                .HasForeignKey("FoodId");
                        });

                    b.Navigation("AminoAcids")
                        .IsRequired();

                    b.Navigation("Minerals")
                        .IsRequired();

                    b.Navigation("NutritionalInformation")
                        .IsRequired();

                    b.Navigation("Vitamins")
                        .IsRequired();
                });

            modelBuilder.Entity("Server.Models.Food.Measure", b =>
                {
                    b.HasOne("Server.Models.Food.Food", null)
                        .WithMany("OneMeasures")
                        .HasForeignKey("FoodId");
                });

            modelBuilder.Entity("Server.Models.Ingredient", b =>
                {
                    b.HasOne("Server.Models.Food.Food", "Food")
                        .WithMany()
                        .HasForeignKey("FoodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Server.Models.Food.Measure", "Measure")
                        .WithMany()
                        .HasForeignKey("MeasureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Server.Models.RecipeStep", null)
                        .WithMany("Ingredients")
                        .HasForeignKey("RecipeStepId");

                    b.OwnsOne("Server.Shared.AminoAcids", "AminoAcids", b1 =>
                        {
                            b1.Property<int>("IngredientId")
                                .HasColumnType("integer");

                            b1.Property<double>("Alanine")
                                .HasColumnType("double precision");

                            b1.Property<double>("Arginine")
                                .HasColumnType("double precision");

                            b1.Property<double>("AsparticAcid")
                                .HasColumnType("double precision");

                            b1.Property<double>("Cystine")
                                .HasColumnType("double precision");

                            b1.Property<double>("GlutamicAcid")
                                .HasColumnType("double precision");

                            b1.Property<double>("Glutamine")
                                .HasColumnType("double precision");

                            b1.Property<double>("Glycine")
                                .HasColumnType("double precision");

                            b1.Property<double>("Histidine")
                                .HasColumnType("double precision");

                            b1.Property<double>("Isoleucine")
                                .HasColumnType("double precision");

                            b1.Property<double>("Leucine")
                                .HasColumnType("double precision");

                            b1.Property<double>("Lysine")
                                .HasColumnType("double precision");

                            b1.Property<double>("Methionine")
                                .HasColumnType("double precision");

                            b1.Property<double>("Phenylalanine")
                                .HasColumnType("double precision");

                            b1.Property<double>("Proline")
                                .HasColumnType("double precision");

                            b1.Property<double>("Serine")
                                .HasColumnType("double precision");

                            b1.Property<double>("Threonine")
                                .HasColumnType("double precision");

                            b1.Property<double>("Tryptophan")
                                .HasColumnType("double precision");

                            b1.Property<double>("Tyrosine")
                                .HasColumnType("double precision");

                            b1.Property<double>("Valine")
                                .HasColumnType("double precision");

                            b1.HasKey("IngredientId");

                            b1.ToTable("Ingredient");

                            b1.WithOwner()
                                .HasForeignKey("IngredientId");
                        });

                    b.OwnsOne("Server.Shared.Minerals", "Minerals", b1 =>
                        {
                            b1.Property<int>("IngredientId")
                                .HasColumnType("integer");

                            b1.Property<double>("Calcium")
                                .HasColumnType("double precision");

                            b1.Property<double>("Copper")
                                .HasColumnType("double precision");

                            b1.Property<double>("Fluoride")
                                .HasColumnType("double precision");

                            b1.Property<double>("Iron")
                                .HasColumnType("double precision");

                            b1.Property<double>("Magnesium")
                                .HasColumnType("double precision");

                            b1.Property<double>("Manganese")
                                .HasColumnType("double precision");

                            b1.Property<double>("Phosphorus")
                                .HasColumnType("double precision");

                            b1.Property<double>("Potassium")
                                .HasColumnType("double precision");

                            b1.Property<double>("Selenium")
                                .HasColumnType("double precision");

                            b1.Property<double>("Sodium")
                                .HasColumnType("double precision");

                            b1.Property<double>("Zinc")
                                .HasColumnType("double precision");

                            b1.HasKey("IngredientId");

                            b1.ToTable("Ingredient");

                            b1.WithOwner()
                                .HasForeignKey("IngredientId");
                        });

                    b.OwnsOne("Server.Shared.NutritionalInformation", "NutritionalInformation", b1 =>
                        {
                            b1.Property<int>("IngredientId")
                                .HasColumnType("integer");

                            b1.Property<double>("Acidification")
                                .HasColumnType("double precision");

                            b1.Property<double>("Ashes")
                                .HasColumnType("double precision");

                            b1.Property<double>("Calories")
                                .HasColumnType("double precision");

                            b1.Property<double>("Carbohydrates")
                                .HasColumnType("double precision");

                            b1.Property<double>("Cholesterol")
                                .HasColumnType("double precision");

                            b1.Property<double>("DietaryFiber")
                                .HasColumnType("double precision");

                            b1.Property<double>("Gi")
                                .HasColumnType("double precision");

                            b1.Property<double>("Gl")
                                .HasColumnType("double precision");

                            b1.Property<double>("MonounsaturatedFats")
                                .HasColumnType("double precision");

                            b1.Property<double>("PolyunsaturatedFats")
                                .HasColumnType("double precision");

                            b1.Property<double>("Proteins")
                                .HasColumnType("double precision");

                            b1.Property<double>("SaturedFats")
                                .HasColumnType("double precision");

                            b1.Property<double>("TotalFat")
                                .HasColumnType("double precision");

                            b1.HasKey("IngredientId");

                            b1.ToTable("Ingredient");

                            b1.WithOwner()
                                .HasForeignKey("IngredientId");
                        });

                    b.OwnsOne("Server.Shared.Vitamins", "Vitamins", b1 =>
                        {
                            b1.Property<int>("IngredientId")
                                .HasColumnType("integer");

                            b1.Property<double>("A")
                                .HasColumnType("double precision");

                            b1.Property<double>("AlphaCarotene")
                                .HasColumnType("double precision");

                            b1.Property<double>("B1")
                                .HasColumnType("double precision");

                            b1.Property<double>("B11")
                                .HasColumnType("double precision");

                            b1.Property<double>("B12")
                                .HasColumnType("double precision");

                            b1.Property<double>("B2")
                                .HasColumnType("double precision");

                            b1.Property<double>("B3")
                                .HasColumnType("double precision");

                            b1.Property<double>("B5")
                                .HasColumnType("double precision");

                            b1.Property<double>("B6")
                                .HasColumnType("double precision");

                            b1.Property<double>("B7")
                                .HasColumnType("double precision");

                            b1.Property<double>("B9")
                                .HasColumnType("double precision");

                            b1.Property<double>("BetaCarotene")
                                .HasColumnType("double precision");

                            b1.Property<double>("C")
                                .HasColumnType("double precision");

                            b1.Property<double>("Choline")
                                .HasColumnType("double precision");

                            b1.Property<double>("CryptoxanthinCarotene")
                                .HasColumnType("double precision");

                            b1.Property<double>("D")
                                .HasColumnType("double precision");

                            b1.Property<double>("D2")
                                .HasColumnType("double precision");

                            b1.Property<double>("D3")
                                .HasColumnType("double precision");

                            b1.Property<double>("E")
                                .HasColumnType("double precision");

                            b1.Property<double>("K")
                                .HasColumnType("double precision");

                            b1.Property<double>("Lycopene")
                                .HasColumnType("double precision");

                            b1.HasKey("IngredientId");

                            b1.ToTable("Ingredient");

                            b1.WithOwner()
                                .HasForeignKey("IngredientId");
                        });

                    b.Navigation("AminoAcids")
                        .IsRequired();

                    b.Navigation("Food");

                    b.Navigation("Measure");

                    b.Navigation("Minerals")
                        .IsRequired();

                    b.Navigation("NutritionalInformation")
                        .IsRequired();

                    b.Navigation("Vitamins")
                        .IsRequired();
                });

            modelBuilder.Entity("Server.Models.Recipe", b =>
                {
                    b.OwnsOne("Server.Shared.AminoAcids", "AminoAcids", b1 =>
                        {
                            b1.Property<int>("RecipeId")
                                .HasColumnType("integer");

                            b1.Property<double>("Alanine")
                                .HasColumnType("double precision");

                            b1.Property<double>("Arginine")
                                .HasColumnType("double precision");

                            b1.Property<double>("AsparticAcid")
                                .HasColumnType("double precision");

                            b1.Property<double>("Cystine")
                                .HasColumnType("double precision");

                            b1.Property<double>("GlutamicAcid")
                                .HasColumnType("double precision");

                            b1.Property<double>("Glutamine")
                                .HasColumnType("double precision");

                            b1.Property<double>("Glycine")
                                .HasColumnType("double precision");

                            b1.Property<double>("Histidine")
                                .HasColumnType("double precision");

                            b1.Property<double>("Isoleucine")
                                .HasColumnType("double precision");

                            b1.Property<double>("Leucine")
                                .HasColumnType("double precision");

                            b1.Property<double>("Lysine")
                                .HasColumnType("double precision");

                            b1.Property<double>("Methionine")
                                .HasColumnType("double precision");

                            b1.Property<double>("Phenylalanine")
                                .HasColumnType("double precision");

                            b1.Property<double>("Proline")
                                .HasColumnType("double precision");

                            b1.Property<double>("Serine")
                                .HasColumnType("double precision");

                            b1.Property<double>("Threonine")
                                .HasColumnType("double precision");

                            b1.Property<double>("Tryptophan")
                                .HasColumnType("double precision");

                            b1.Property<double>("Tyrosine")
                                .HasColumnType("double precision");

                            b1.Property<double>("Valine")
                                .HasColumnType("double precision");

                            b1.HasKey("RecipeId");

                            b1.ToTable("Recipes");

                            b1.WithOwner()
                                .HasForeignKey("RecipeId");
                        });

                    b.OwnsOne("Server.Shared.Minerals", "Minerals", b1 =>
                        {
                            b1.Property<int>("RecipeId")
                                .HasColumnType("integer");

                            b1.Property<double>("Calcium")
                                .HasColumnType("double precision");

                            b1.Property<double>("Copper")
                                .HasColumnType("double precision");

                            b1.Property<double>("Fluoride")
                                .HasColumnType("double precision");

                            b1.Property<double>("Iron")
                                .HasColumnType("double precision");

                            b1.Property<double>("Magnesium")
                                .HasColumnType("double precision");

                            b1.Property<double>("Manganese")
                                .HasColumnType("double precision");

                            b1.Property<double>("Phosphorus")
                                .HasColumnType("double precision");

                            b1.Property<double>("Potassium")
                                .HasColumnType("double precision");

                            b1.Property<double>("Selenium")
                                .HasColumnType("double precision");

                            b1.Property<double>("Sodium")
                                .HasColumnType("double precision");

                            b1.Property<double>("Zinc")
                                .HasColumnType("double precision");

                            b1.HasKey("RecipeId");

                            b1.ToTable("Recipes");

                            b1.WithOwner()
                                .HasForeignKey("RecipeId");
                        });

                    b.OwnsOne("Server.Shared.NutritionalInformation", "NutritionalInformation", b1 =>
                        {
                            b1.Property<int>("RecipeId")
                                .HasColumnType("integer");

                            b1.Property<double>("Acidification")
                                .HasColumnType("double precision");

                            b1.Property<double>("Ashes")
                                .HasColumnType("double precision");

                            b1.Property<double>("Calories")
                                .HasColumnType("double precision");

                            b1.Property<double>("Carbohydrates")
                                .HasColumnType("double precision");

                            b1.Property<double>("Cholesterol")
                                .HasColumnType("double precision");

                            b1.Property<double>("DietaryFiber")
                                .HasColumnType("double precision");

                            b1.Property<double>("Gi")
                                .HasColumnType("double precision");

                            b1.Property<double>("Gl")
                                .HasColumnType("double precision");

                            b1.Property<double>("MonounsaturatedFats")
                                .HasColumnType("double precision");

                            b1.Property<double>("PolyunsaturatedFats")
                                .HasColumnType("double precision");

                            b1.Property<double>("Proteins")
                                .HasColumnType("double precision");

                            b1.Property<double>("SaturedFats")
                                .HasColumnType("double precision");

                            b1.Property<double>("TotalFat")
                                .HasColumnType("double precision");

                            b1.HasKey("RecipeId");

                            b1.ToTable("Recipes");

                            b1.WithOwner()
                                .HasForeignKey("RecipeId");
                        });

                    b.OwnsOne("Server.Shared.Vitamins", "Vitamins", b1 =>
                        {
                            b1.Property<int>("RecipeId")
                                .HasColumnType("integer");

                            b1.Property<double>("A")
                                .HasColumnType("double precision");

                            b1.Property<double>("AlphaCarotene")
                                .HasColumnType("double precision");

                            b1.Property<double>("B1")
                                .HasColumnType("double precision");

                            b1.Property<double>("B11")
                                .HasColumnType("double precision");

                            b1.Property<double>("B12")
                                .HasColumnType("double precision");

                            b1.Property<double>("B2")
                                .HasColumnType("double precision");

                            b1.Property<double>("B3")
                                .HasColumnType("double precision");

                            b1.Property<double>("B5")
                                .HasColumnType("double precision");

                            b1.Property<double>("B6")
                                .HasColumnType("double precision");

                            b1.Property<double>("B7")
                                .HasColumnType("double precision");

                            b1.Property<double>("B9")
                                .HasColumnType("double precision");

                            b1.Property<double>("BetaCarotene")
                                .HasColumnType("double precision");

                            b1.Property<double>("C")
                                .HasColumnType("double precision");

                            b1.Property<double>("Choline")
                                .HasColumnType("double precision");

                            b1.Property<double>("CryptoxanthinCarotene")
                                .HasColumnType("double precision");

                            b1.Property<double>("D")
                                .HasColumnType("double precision");

                            b1.Property<double>("D2")
                                .HasColumnType("double precision");

                            b1.Property<double>("D3")
                                .HasColumnType("double precision");

                            b1.Property<double>("E")
                                .HasColumnType("double precision");

                            b1.Property<double>("K")
                                .HasColumnType("double precision");

                            b1.Property<double>("Lycopene")
                                .HasColumnType("double precision");

                            b1.HasKey("RecipeId");

                            b1.ToTable("Recipes");

                            b1.WithOwner()
                                .HasForeignKey("RecipeId");
                        });

                    b.Navigation("AminoAcids")
                        .IsRequired();

                    b.Navigation("Minerals")
                        .IsRequired();

                    b.Navigation("NutritionalInformation")
                        .IsRequired();

                    b.Navigation("Vitamins")
                        .IsRequired();
                });

            modelBuilder.Entity("Server.Models.RecipeStep", b =>
                {
                    b.HasOne("Server.Models.Recipe", null)
                        .WithMany("Steps")
                        .HasForeignKey("RecipeId");
                });

            modelBuilder.Entity("Server.Models.Food.Food", b =>
                {
                    b.Navigation("OneMeasures");
                });

            modelBuilder.Entity("Server.Models.Recipe", b =>
                {
                    b.Navigation("Steps");
                });

            modelBuilder.Entity("Server.Models.RecipeStep", b =>
                {
                    b.Navigation("Ingredients");
                });
#pragma warning restore 612, 618
        }
    }
}
